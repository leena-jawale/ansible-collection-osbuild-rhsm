---

- hosts: rhel-dev
  gather_facts: false
  vars:
    # Required variables
    - local_container_registry_auth_file: "{{ playbook_dir }}/secrets/container-authfile.json"
    - local_public_key_file: "{{ playbook_dir }}/secrets/id_rsa.pub"

    # Optional variables
    - osbuild_workdir: "/tmp/osbuild-aap"
    - aap_version: "2.4"
    - rhel_version: "9"
    - run_step_install_packages: true
    - run_step_enable_rhsm_repos: true
    - run_step_setup_osbuild: true

  tasks:
    - name: "[include task] ./tasks/install_dependencies.yml"
      when: run_step_install_packages
      include_tasks: ./tasks/install_dependencies.yml

    # ----------

    - name: "[include task] ./tasks/enable_rhsm_repos.yml"
      when: run_step_enable_rhsm_repos
      include_tasks: ./tasks/enable_rhsm_repos.yml

    # ----------

    - name: "[include task] ./tasks/setup_osbuild_and_repos.yml"
      when: run_step_setup_osbuild
      include_tasks: ./tasks/setup_osbuild_and_repos.yml

    # ----------

    - name: "Create osbuild pipeline file"
      vars:
        _public_key: "{{ lookup('file', local_public_key_file) }}"
      ansible.builtin.copy:
        content: |
          name = "aap-installer"
          description = ""
          version = "0.0.1"
          modules = []
          groups = []
          distro = ""

          [[packages]]
          name = "ansible-automation-platform-installer"

          [[packages]]
          name = "tmux"

          [customizations]
          [customizations.kernel]
          append = ""

          [[customizations.sshkey]]
          user = "root"
          key = "{{ _public_key | trim }}"
          [customizations.timezone]
          [customizations.locale]
          [customizations.firewall]
          [customizations.firewall.services]
          [customizations.services]
          [customizations.fdo]
          [customizations.ignition]
          [customizations.ignition.firstboot]

        dest: "{{ osbuild_workdir }}/pipeline-aap-installer.toml"
        mode: '0644'

    - name: "Push osbuild pipeline from file"
      ansible.builtin.command:
        cmd: "composer-cli blueprints push {{ osbuild_workdir }}/pipeline-aap-installer.toml"
      register: result_push_pipeline

    - name: "[debug] Push osbuild pipeline"
      ansible.builtin.debug:
        msg: "{{ result_push_pipeline.stdout_lines }}"
